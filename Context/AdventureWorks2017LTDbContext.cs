// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Context
{
    using Configurations;
    using Entities;
    using Interfaces;
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class AdventureWorks2017LTDbContext : System.Data.Entity.DbContext, IAdventureWorks2017LTDbContext
    {
        public System.Data.Entity.DbSet<BuildVersion> BuildVersions { get; set; } // BuildVersion
        public System.Data.Entity.DbSet<ErrorLog> ErrorLogs { get; set; } // ErrorLog
        public System.Data.Entity.DbSet<SalesLT_Address> SalesLT_Addresses { get; set; } // Address
        public System.Data.Entity.DbSet<SalesLT_Customer> SalesLT_Customers { get; set; } // Customer
        public System.Data.Entity.DbSet<SalesLT_CustomerAddress> SalesLT_CustomerAddresses { get; set; } // CustomerAddress
        public System.Data.Entity.DbSet<SalesLT_Product> SalesLT_Products { get; set; } // Product
        public System.Data.Entity.DbSet<SalesLT_ProductCategory> SalesLT_ProductCategories { get; set; } // ProductCategory
        public System.Data.Entity.DbSet<SalesLT_ProductDescription> SalesLT_ProductDescriptions { get; set; } // ProductDescription
        public System.Data.Entity.DbSet<SalesLT_ProductModel> SalesLT_ProductModels { get; set; } // ProductModel
        public System.Data.Entity.DbSet<SalesLT_ProductModelProductDescription> SalesLT_ProductModelProductDescriptions { get; set; } // ProductModelProductDescription
        public System.Data.Entity.DbSet<SalesLT_SalesOrderDetail> SalesLT_SalesOrderDetails { get; set; } // SalesOrderDetail
        public System.Data.Entity.DbSet<SalesLT_SalesOrderHeader> SalesLT_SalesOrderHeaders { get; set; } // SalesOrderHeader
        public System.Data.Entity.DbSet<SalesLT_VGetAllCategory> SalesLT_VGetAllCategories { get; set; } // vGetAllCategories
        public System.Data.Entity.DbSet<SalesLT_VProductAndDescription> SalesLT_VProductAndDescriptions { get; set; } // vProductAndDescription
        public System.Data.Entity.DbSet<SalesLT_VProductModelCatalogDescription> SalesLT_VProductModelCatalogDescriptions { get; set; } // vProductModelCatalogDescription

        static AdventureWorks2017LTDbContext()
        {
            System.Data.Entity.Database.SetInitializer<AdventureWorks2017LTDbContext>(null);
        }

        public AdventureWorks2017LTDbContext()
            : base("Name=AdventureWorks2017LTConnectionString")
        {
        }

        public AdventureWorks2017LTDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public AdventureWorks2017LTDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public AdventureWorks2017LTDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public AdventureWorks2017LTDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            //modelBuilder.Conventions.Add(new CodeFirstStoreFunctions.FunctionsConvention<AdventureWorks2017LTDbContext>("dbo"));
            modelBuilder.ComplexType<UfnGetAllCategoriesReturnModel>();
            modelBuilder.ComplexType<UfnGetCustomerInformationReturnModel>();

            modelBuilder.Configurations.Add(new BuildVersionConfiguration());
            modelBuilder.Configurations.Add(new ErrorLogConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_AddressConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_CustomerConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_CustomerAddressConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_ProductConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_ProductCategoryConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_ProductDescriptionConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_ProductModelConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_ProductModelProductDescriptionConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_SalesOrderDetailConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_SalesOrderHeaderConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_VGetAllCategoryConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_VProductAndDescriptionConfiguration());
            modelBuilder.Configurations.Add(new SalesLT_VProductModelCatalogDescriptionConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new BuildVersionConfiguration(schema));
            modelBuilder.Configurations.Add(new ErrorLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_AddressConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_CustomerConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_CustomerAddressConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_ProductConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_ProductCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_ProductDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_ProductModelConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_ProductModelProductDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_SalesOrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_SalesOrderHeaderConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_VGetAllCategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_VProductAndDescriptionConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesLT_VProductModelCatalogDescriptionConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public int UspLogError(out int? errorLogId)
        {
            var errorLogIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@ErrorLogID", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output, Precision = 10, Scale = 0 };
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[uspLogError] @ErrorLogID OUTPUT", errorLogIdParam, procResultParam);
            if (IsSqlParameterNull(errorLogIdParam))
                errorLogId = null;
            else
                errorLogId = (int) errorLogIdParam.Value;

            return (int) procResultParam.Value;
        }

        public int UspPrintError()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[uspPrintError] ", procResultParam);

            return (int) procResultParam.Value;
        }

        // Table Valued Functions
        [System.Data.Entity.DbFunction("AdventureWorks2017LTDbContext", "ufnGetAllCategories")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "dbo")]
        public IQueryable<UfnGetAllCategoriesReturnModel> UfnGetAllCategories()
        {

            return ((System.Data.Entity.Infrastructure.IObjectContextAdapter)this).ObjectContext.CreateQuery<UfnGetAllCategoriesReturnModel>("[AdventureWorks2017LTDbContext].[ufnGetAllCategories]()", new System.Data.Entity.Core.Objects.ObjectParameter[] { });
        }

        [System.Data.Entity.DbFunction("AdventureWorks2017LTDbContext", "ufnGetCustomerInformation")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "dbo")]
        public IQueryable<UfnGetCustomerInformationReturnModel> UfnGetCustomerInformation(int? customerId)
        {
            var customerIdParam = new System.Data.Entity.Core.Objects.ObjectParameter("CustomerID", typeof(int)) { Value = (object)customerId ?? System.DBNull.Value };

            return ((System.Data.Entity.Infrastructure.IObjectContextAdapter)this).ObjectContext.CreateQuery<UfnGetCustomerInformationReturnModel>("[AdventureWorks2017LTDbContext].[ufnGetCustomerInformation](@CustomerID)", customerIdParam);
        }

    }
}
// </auto-generated>
