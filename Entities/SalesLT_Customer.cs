// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Entities
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;

    // Customer
    ///<summary>
    /// Customer information.
    ///</summary>
    [Table("Customer", Schema = "SalesLT")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class SalesLT_Customer
    {

        ///<summary>
        /// Primary key for Customer records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"CustomerID", Order = 1, TypeName = "int")]
        [Index(@"PK_Customer_CustomerID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Customer ID")]
        public int CustomerId { get; set; } // CustomerID (Primary key)

        ///<summary>
        /// 0 = The data in FirstName and LastName are stored in western style (first name, last name) order.  1 = Eastern style (last name, first name) order.
        ///</summary>
        [Column(@"NameStyle", Order = 2, TypeName = "bit")]
        [Required]
        [Display(Name = "Name style")]
        public bool NameStyle { get; set; } // NameStyle

        ///<summary>
        /// A courtesy title. For example, Mr. or Ms.
        ///</summary>
        [Column(@"Title", Order = 3, TypeName = "nvarchar")]
        [MaxLength(8)]
        [StringLength(8)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 8)

        ///<summary>
        /// First name of the person.
        ///</summary>
        [Column(@"FirstName", Order = 4, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "First name")]
        public string FirstName { get; set; } // FirstName (length: 50)

        ///<summary>
        /// Middle name or middle initial of the person.
        ///</summary>
        [Column(@"MiddleName", Order = 5, TypeName = "nvarchar")]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Middle name")]
        public string MiddleName { get; set; } // MiddleName (length: 50)

        ///<summary>
        /// Last name of the person.
        ///</summary>
        [Column(@"LastName", Order = 6, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Last name")]
        public string LastName { get; set; } // LastName (length: 50)

        ///<summary>
        /// Surname suffix. For example, Sr. or Jr.
        ///</summary>
        [Column(@"Suffix", Order = 7, TypeName = "nvarchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Suffix")]
        public string Suffix { get; set; } // Suffix (length: 10)

        ///<summary>
        /// The customer&apos;s organization.
        ///</summary>
        [Column(@"CompanyName", Order = 8, TypeName = "nvarchar")]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Company name")]
        public string CompanyName { get; set; } // CompanyName (length: 128)

        ///<summary>
        /// The customer&apos;s sales person, an employee of AdventureWorks Cycles.
        ///</summary>
        [Column(@"SalesPerson", Order = 9, TypeName = "nvarchar")]
        [MaxLength(256)]
        [StringLength(256)]
        [Display(Name = "Sales person")]
        public string SalesPerson { get; set; } // SalesPerson (length: 256)

        ///<summary>
        /// E-mail address for the person.
        ///</summary>
        [Column(@"EmailAddress", Order = 10, TypeName = "nvarchar")]
        [Index(@"IX_Customer_EmailAddress", 1, IsUnique = false, IsClustered = false)]
        [MaxLength(50)]
        [StringLength(50)]
        [EmailAddress]
        [Display(Name = "Email address")]
        public string EmailAddress { get; set; } // EmailAddress (length: 50)

        ///<summary>
        /// Phone number associated with the person.
        ///</summary>
        [Column(@"Phone", Order = 11, TypeName = "nvarchar")]
        [MaxLength(25)]
        [StringLength(25)]
        [Phone]
        [Display(Name = "Phone")]
        public string Phone { get; set; } // Phone (length: 25)

        ///<summary>
        /// Password for the e-mail account.
        ///</summary>
        [Column(@"PasswordHash", Order = 12, TypeName = "varchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(128)]
        [StringLength(128)]
        [Display(Name = "Password hash")]
        public string PasswordHash { get; set; } // PasswordHash (length: 128)

        ///<summary>
        /// Random value concatenated with the password string before the password is hashed.
        ///</summary>
        [Column(@"PasswordSalt", Order = 13, TypeName = "varchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Password salt")]
        public string PasswordSalt { get; set; } // PasswordSalt (length: 10)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 14, TypeName = "uniqueidentifier")]
        [Index(@"AK_Customer_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 15, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child SalesLT_CustomerAddresses where [CustomerAddress].[CustomerID] point to this entity (FK_CustomerAddress_Customer_CustomerID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_CustomerAddress> SalesLT_CustomerAddresses { get; set; } // CustomerAddress.FK_CustomerAddress_Customer_CustomerID
        /// <summary>
        /// Child SalesLT_SalesOrderHeaders where [SalesOrderHeader].[CustomerID] point to this entity (FK_SalesOrderHeader_Customer_CustomerID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<SalesLT_SalesOrderHeader> SalesLT_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Customer_CustomerID

        public SalesLT_Customer()
        {
            NameStyle = false;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            SalesLT_CustomerAddresses = new System.Collections.Generic.List<SalesLT_CustomerAddress>();
            SalesLT_SalesOrderHeaders = new System.Collections.Generic.List<SalesLT_SalesOrderHeader>();
        }
    }

}
// </auto-generated>
